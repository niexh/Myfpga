--scfifo ADD_RAM_OUTPUT_REGISTER="ON" ALMOST_EMPTY_VALUE=30 DEVICE_FAMILY="Stratix II" LPM_NUMWORDS=32 LPM_SHOWAHEAD="ON" LPM_WIDTH=1 LPM_WIDTHU=5 OPTIMIZE_FOR_SPEED=5 OVERFLOW_CHECKING="ON" UNDERFLOW_CHECKING="ON" USE_EAB="ON" almost_empty clock data empty q rdreq sclr wrreq CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 CYCLONEII_M4K_COMPATIBILITY="ON" INTENDED_DEVICE_FAMILY="Stratix II" LOW_POWER_MODE="AUTO"
--VERSION_BEGIN 11.0SP1 cbx_altdpram 2011:07:03:21:07:09:SJ cbx_altsyncram 2011:07:03:21:07:09:SJ cbx_cycloneii 2011:07:03:21:07:09:SJ cbx_fifo_common 2011:07:03:21:07:09:SJ cbx_lpm_add_sub 2011:07:03:21:07:09:SJ cbx_lpm_compare 2011:07:03:21:07:09:SJ cbx_lpm_counter 2011:07:03:21:07:09:SJ cbx_lpm_decode 2011:07:03:21:07:09:SJ cbx_lpm_mux 2011:07:03:21:07:09:SJ cbx_mgl 2011:07:03:21:10:12:SJ cbx_scfifo 2011:07:03:21:07:09:SJ cbx_stratix 2011:07:03:21:07:09:SJ cbx_stratixii 2011:07:03:21:07:09:SJ cbx_stratixiii 2011:07:03:21:07:09:SJ cbx_stratixv 2011:07:03:21:07:09:SJ cbx_util_mgl 2011:07:03:21:07:09:SJ  VERSION_END


-- Copyright (C) 1991-2011 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION a_dpfifo_3v21 (clock, data[0..0], rreq, sclr, wreq)
RETURNS ( empty, q[0..0], usedw[4..0]);

--synthesis_resources = lut 10 ram_bits (AUTO) 32 reg 24 
SUBDESIGN scfifo_0261
( 
	almost_empty	:	output;
	clock	:	input;
	data[0..0]	:	input;
	empty	:	output;
	q[0..0]	:	output;
	rdreq	:	input;
	sclr	:	input;
	wrreq	:	input;
) 
VARIABLE 
	dpfifo : a_dpfifo_3v21;
	dffe_nae : dffe;
	comparison_ae0	: WIRE;
	comparison_ae1	: WIRE;
	comparison_ae2	: WIRE;
	comparison_ae3	: WIRE;
	comparison_ae4	: WIRE;
	comparison_pre_ae0	: WIRE;
	comparison_pre_ae1	: WIRE;
	comparison_pre_ae2	: WIRE;
	comparison_pre_ae3	: WIRE;
	comparison_pre_ae4	: WIRE;
	wire_ae[4..0]	: WIRE;
	wire_pre_ae[4..0]	: WIRE;

BEGIN 
	dpfifo.clock = clock;
	dpfifo.data[] = data[];
	dpfifo.rreq = rdreq;
	dpfifo.sclr = sclr;
	dpfifo.wreq = wrreq;
	dffe_nae.clk = clock;
	dffe_nae.d = ((dffe_nae.q & (dffe_nae.q $ (sclr # ((comparison_ae4 & (! wrreq)) & rdreq)))) # ((! dffe_nae.q) & ((((! sclr) & comparison_pre_ae4) & wrreq) & (! rdreq))));
	almost_empty = (! dffe_nae.q);
	comparison_ae0 = (dpfifo.usedw[0..0] $ wire_ae[0..0]);
	comparison_ae1 = ((dpfifo.usedw[1..1] $ wire_ae[1..1]) & comparison_ae0);
	comparison_ae2 = ((dpfifo.usedw[2..2] $ wire_ae[2..2]) & comparison_ae1);
	comparison_ae3 = ((dpfifo.usedw[3..3] $ wire_ae[3..3]) & comparison_ae2);
	comparison_ae4 = ((dpfifo.usedw[4..4] $ wire_ae[4..4]) & comparison_ae3);
	comparison_pre_ae0 = (dpfifo.usedw[0..0] $ wire_pre_ae[0..0]);
	comparison_pre_ae1 = ((dpfifo.usedw[1..1] $ wire_pre_ae[1..1]) & comparison_pre_ae0);
	comparison_pre_ae2 = ((dpfifo.usedw[2..2] $ wire_pre_ae[2..2]) & comparison_pre_ae1);
	comparison_pre_ae3 = ((dpfifo.usedw[3..3] $ wire_pre_ae[3..3]) & comparison_pre_ae2);
	comparison_pre_ae4 = ((dpfifo.usedw[4..4] $ wire_pre_ae[4..4]) & comparison_pre_ae3);
	empty = dpfifo.empty;
	q[] = dpfifo.q[];
	wire_ae[] = ( B"0", B"0", B"0", B"0", B"1");
	wire_pre_ae[] = ( B"0", B"0", B"0", B"1", B"0");
END;
--VALID FILE
